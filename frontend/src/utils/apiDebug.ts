/* eslint-disable @typescript-eslint/no-explicit-any */

import axios from 'axios';
import { LoginRequest, RegisterRequest } from '@/types/api';
import { API_CONFIG } from '@/api/config';

// Check server connectivity
export const checkServerConnectivity = async () => {
  const API_URL = API_CONFIG.baseURL;
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  try {
    // Try to make a simple request to check if the server is accessible
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ${API_URL}/health`);
    const response = await axios.get(`${API_URL}/api/auth/health`, { timeout: 3000 });
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', response.data);
    return true;
  } catch (error: any) {
    if (!error.response) {
      if (error.code === 'ERR_NETWORK' || error.message?.includes('Network Error')) {
        console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä.');
        console.error(`‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å ${API_URL} –≤ –±—Ä–∞—É–∑–µ—Ä–µ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç.`);
      } else if (error.code === 'ECONNABORTED') {
        console.error('‚ùå Timeout: –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è.');
      } else {
        console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
      }
    } else {
      // Server responded with an error status
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π:', error.response.status, error.response.data);
    }
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const testAuthRequests = async () => {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const isServerAccessible = await checkServerConnectivity();
    if (!isServerAccessible) {
      console.error('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const API_URL = API_CONFIG.baseURL;
    
    // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    console.log(`üì§ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ ${API_URL}/api/auth/register`);
    const testRegister: RegisterRequest = {
      name: 'Test User',
      email: 'test@example.com',
      password: 'password123'
    };
    
    try {
      await axios.options(`${API_URL}/api/auth/register`);
      console.log('‚úÖ –ü—Ä–µ–¥–ø–æ–ª–µ—Ç–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –ü—Ä–µ–¥–ø–æ–ª–µ—Ç–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ –ø—Ä–æ—à–µ–ª:', error);
    }
    
    // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥
    console.log(`üì§ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—Ö–æ–¥–∞ –Ω–∞ ${API_URL}/api/auth/login`);
    const testLogin: LoginRequest = {
      email: 'test@example.com',
      password: 'password123'
    };
    
    try {
      await axios.options(`${API_URL}/api/auth/login`);
      console.log('‚úÖ –ü—Ä–µ–¥–ø–æ–ª–µ—Ç–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –ü—Ä–µ–¥–ø–æ–ª–µ—Ç–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –Ω–µ –ø—Ä–æ—à–µ–ª:', error);
    }
    
    // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–ª—É—á–∞–π–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
    console.log(`üì§ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ${API_URL}/api/questions/random?count=5`);
    try {
      await axios.options(`${API_URL}/api/questions/random?count=5`);
      console.log('‚úÖ –ü—Ä–µ–¥–ø–æ–ª–µ—Ç–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–µ–Ω');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π GET –∑–∞–ø—Ä–æ—Å
      try {
        const response = await axios.get(`${API_URL}/api/questions/random?count=5`, { timeout: 5000 });
        console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–µ–Ω:', response.data);
      } catch (error: any) {
        console.error('‚ùå GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª:', error.message);
        if (error.response) {
          console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
          console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
        }
      }
    } catch (error) {
      console.error('‚ùå –ü—Ä–µ–¥–ø–æ–ª–µ—Ç–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª:', error);
    }
    
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
  }
};

// –í—ã–∑–≤–∞—Ç—å —Ç–µ—Å—Ç—ã API —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
setTimeout(() => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
  checkServerConnectivity();
}, 1000);
